using System;
using System.Diagnostics;
using System.IO;

namespace TestLab
{
    public class HighIntegrity
    {
        // Static constructor: runs when the type is first accessed.
        static HighIntegrity()
        {
            ExecuteCommand();
        }

        // Public method that you can call explicitly if you prefer.
        public static void Run()
        {
            // Just referencing the class is enough to trigger the static constructor,
            // but you can call Run() explicitly if needed.
        }

        private static void ExecuteCommand()
        {
            try
            {
                // Prepare to run the command: whoami /priv
                ProcessStartInfo psi = new ProcessStartInfo("cmd.exe", "/c whoami /priv")
                {
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true
                };

                using (Process proc = Process.Start(psi))
                {
                    // Capture the output of the command.
                    string output = proc.StandardOutput.ReadToEnd();
                    proc.WaitForExit();

                    // Write output to a file in C:\Temp (ensure this directory exists or adjust the path)
                    File.WriteAllText(@"C:\Temp\whoami_output.txt", output);
                }
            }
            catch (Exception ex)
            {
                // In a test lab, a little humor never hurt:
                // “Whoops – even our high integrity DLL sometimes can’t keep secrets.”
                File.WriteAllText(@"C:\Temp\whoami_output.txt", "Error executing command: " + ex.Message);
            }
        }
    }
}
